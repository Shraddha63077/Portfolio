/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: AmandaNerd (https://sketchfab.com/baricustom)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/amanda-nerd-3c3f7824a24640bd9ee3e87f1c2842ed
Title: Amanda Nerd
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations, useFBX } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";

const Developer = ({ animationName = "idle", ...props }) => {
  const group = useRef();
  const { nodes, materials } = useGLTF("/models/animations/developer.glb");
  const { mouse } = useThree();
  const [isRotating, setIsRotating] = useState(false);
  const [targetRotation, setTargetRotation] = useState(0);

  const { animations: idleAnimation } = useFBX("models/animations/idle.fbx");

  idleAnimation[0].name = "idle";

  const { actions } = useAnimations([idleAnimation[0]], group);

  useEffect(() => {
    actions[animationName].reset().fadeIn(0.5).play();

    return () => actions[animationName].fadeOut(0.5)
  }, [animationName]);

  // Handle click to rotate
  const handleClick = () => {
    setIsRotating(true);
    setTimeout(() => setIsRotating(false), 1000); // Stop rotating after 1 second
  };

  // Update target rotation based on mouse position
  useFrame(() => {
    if (group.current) {
      // Calculate target rotation based on mouse position
      const targetYRotation = mouse.x * Math.PI;
      
      // Smoothly interpolate towards target rotation
      if (isRotating) {
        // Click rotation takes priority
        group.current.rotation.y += 0.1;
      } else {
        // Smooth mouse tracking
        group.current.rotation.y += (targetYRotation - group.current.rotation.y) * 0.05;
      }
    }
  });

  return (
    <group ref={group} {...props} dispose={null} onClick={handleClick}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group
            name="0bdfd07e2aa14498a812b672f27f325efbx"
            rotation={[Math.PI / 2, 0, 0]}
            scale={0.01}
          >
            <group name="Object_2">
              <group name="RootNode">
                <group name="Amanfa_Nerd">
                  <group name="Object_5">
                    <primitive object={nodes._rootJoint} />
                    <skinnedMesh
                      name="Object_8"
                      geometry={nodes.Object_8.geometry}
                      material={materials.material}
                      skeleton={nodes.Object_8.skeleton}
                    />
                    <skinnedMesh
                      name="Object_9"
                      geometry={nodes.Object_9.geometry}
                      material={materials["Mat.2"]}
                      skeleton={nodes.Object_9.skeleton}
                    />
                    <skinnedMesh
                      name="Object_10"
                      geometry={nodes.Object_10.geometry}
                      material={materials["Mat.4"]}
                      skeleton={nodes.Object_10.skeleton}
                    />
                    <skinnedMesh
                      name="Object_11"
                      geometry={nodes.Object_11.geometry}
                      material={materials["Mat.3"]}
                      skeleton={nodes.Object_11.skeleton}
                    />
                    <skinnedMesh
                      name="Object_12"
                      geometry={nodes.Object_12.geometry}
                      material={materials["Mat.1"]}
                      skeleton={nodes.Object_12.skeleton}
                    />
                    <skinnedMesh
                      name="Object_13"
                      geometry={nodes.Object_13.geometry}
                      material={materials["Mat.6"]}
                      skeleton={nodes.Object_13.skeleton}
                    />
                    <group name="Object_7" position={[0, 170.101, 0]} />
                    <group name="Amanda_Nerd" position={[0, 170.101, 0]}>
                      <group name="Piel" />
                    </group>
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
};

useGLTF.preload("/models/animations/developer.glb");
export default Developer;
